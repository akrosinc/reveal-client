buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.1.2"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'io.fabric.tools:gradle:1.25.4'
    }
}

allprojects {
    repositories {
        maven { url 'https://maven.google.com' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "http://dl.bintray.com/ona/kujaku" }
        maven { url 'https://maven.fabric.io/public' }
        mavenLocal()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'io.fabric'

jacoco {
    toolVersion = "0.7.9"
}


android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    testOptions.unitTests.includeAndroidResources = true

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "org.smartregister.reveal"
        minSdkVersion 18
        targetSdkVersion 28
        versionCode 2
        versionName "1.4"
        multiDexEnabled true
        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        buildConfigField "String", "SYNC_TYPE", '"teamId"'
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        resValue "string", 'opensrp_url', '"https://reveal.smartregister.org/opensrp/"'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [eventBusIndex: 'org.smartregister.reveal.RevelEventBusIndex']
            }
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", 'opensrp_url', '""'
            buildConfigField "int", "DATABASE_VERSION", '2'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "SYNC_INTERVAL_IN_MINUTES", '2'
            buildConfigField "org.smartregister.reveal.util.Country", "BUILD_COUNTRY", "org.smartregister.reveal.util.Country.ZAMBIA"
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '10'
            buildConfigField "String", "ADMIN_PASSWORD_NOT_NEAR_STRUCTURES", '"AdminPass1"'
            buildConfigField "float", "MY_LOCATION_BUFFER", '100'
            buildConfigField "boolean", "VALIDATE_FAR_STRUCTURES", 'true'
            buildConfigField "int", "RESOLVE_LOCATION_TIMEOUT_IN_SECONDS", '90'


            if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                if (properties != null &&
                        properties.containsKey("mapbox.sdk.token")) {
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
                } else {
                    println("One of the required config variables is not set in your local.properties")
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
                }
            } else {
                println("local.properties does not exist")
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
            }
        }

        debug {
            resValue "string", 'opensrp_url', '"https://reveal-stage.smartregister.org/opensrp/"'
            buildConfigField "int", "DATABASE_VERSION", '2'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "SYNC_INTERVAL_IN_MINUTES", '2'
            buildConfigField "org.smartregister.reveal.util.Country", "BUILD_COUNTRY", "org.smartregister.reveal.util.Country.ZAMBIA"
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '10'
            buildConfigField "String", "ADMIN_PASSWORD_NOT_NEAR_STRUCTURES", '"AdminPass1"'
            buildConfigField "float", "MY_LOCATION_BUFFER", '100'
            buildConfigField "boolean", "VALIDATE_FAR_STRUCTURES", 'true'
            buildConfigField "int", "RESOLVE_LOCATION_TIMEOUT_IN_SECONDS", '60'

            testCoverageEnabled true
            if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                if (properties != null &&
                        properties.containsKey("mapbox.sdk.token")) {
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
                } else {
                    println("One of the required config variables is not set in your local.properties")
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
                }
            } else {
                println("local.properties does not exist")
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
            }
        }


    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'

    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

dependencies {

    implementation('io.ona.kujaku:library:0.6.3') {
        transitive = true
        exclude group: 'com.android.volley'
        exclude group: 'kujaku', module: 'utils'
    }

    implementation 'io.ona.kujaku:utils:0.6.1'

    implementation('org.smartregister:opensrp-client-core:1.6.15-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'net.zetetic', module: 'android-database-sqlcipher'
        exclude group: 'com.google.android.gms', module: 'play-services-vision'
        exclude group: 'com.github.ybq', module: 'Android-SpinKit'
        exclude group: 'org.apache.httpcomponents', module: 'httpmime'
        exclude group: 'com.github.ybq', module: 'Android-SpinKit'
    }

    implementation('org.smartregister:opensrp-client-configurable-views:1.1.2-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    implementation('org.smartregister:opensrp-client-native-form:1.5.6-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
    }

    implementation('org.smartregister:opensrp-client-family:1.2.4-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'org.smartregister', module: 'opensrp-client-configurable-views'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    implementation 'net.zetetic:android-database-sqlcipher:3.5.9@aar'

    implementation('com.android.support:design:28.0.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'


    implementation 'com.github.ybq:Android-SpinKit:1.2.0'

    implementation 'com.evernote:android-job:1.2.6'

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true;
    }

    implementation 'org.jbundle.util.osgi.wrapped:org.jbundle.util.osgi.wrapped.org.apache.http.client:4.1.2'

    implementation 'com.github.ybq:Android-SpinKit:1.2.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation('com.squareup:fest-android:1.0.8') { exclude module: 'support-v4' }

    testImplementation 'org.robolectric:robolectric:4.2'
    testImplementation 'org.robolectric:shadows-multidex:4.2'
    // PowerMock
    def powerMockVersion = '2.0.0'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}
